name: Wails build

on:
  push:
    tags:
      - 'v*'


permissions:
  contents: write 

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: 'Linux app amd64'
            name_archive: 'arz-onoffical-linux-amd64'
            type_archive: "tar.gz"
            platform:  'linux/amd64'
            os: 'ubuntu-latest'
          - name: 'Windows app amd64'
            name_archive: 'arz-onoffical-windows-amd64'
            type_archive: "zip"
            platform:  'windows/amd64'
            os: 'ubuntu-latest'
          - name: 'Windows app x86'
            name_archive: 'arz-onoffical-windows-x86'
            type_archive: "zip"
            platform:  'windows/386'
            os: 'ubuntu-latest'
      
    runs-on: ${{ matrix.build.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Install dependencies 
        run: | 
          sudo apt update && sudo apt install -y \
          build-essential \
          libgtk-3-dev \
          libwebkit2gtk-4.1-dev \
          libglib2.0-dev \
          libgdk-pixbuf2.0-dev \
          libpango1.0-dev \
          pkg-config \
          wget \
          tar \
          zip \
          npm \
          libcairo2-dev \
          libpango1.0-dev \
          wget \
          file \
          desktop-file-utils \
          appstream \
          patchelf
          nodejs \
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'
      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@latest
      - name: Build app ${{ matrix.build.name }}
        run: |
          wails build -platform linux/amd64 -tags webkit2_41 -clean -s 
          rm ./build/bin/*
          wails build -platform ${{ matrix.build.platform }} -tags webkit2_41 -skipbindings
      - name: Archiving app 
        env:
          VERSION: ${{ github.ref_name }}
          MATRIX_NAME_ARCHIVE: ${{ matrix.build.name_archive }}
          MATRIX_TYPE_ARCHIVE: ${{ matrix.build.type_archive }}
        run: |
           mkdir -p dist
           cp -r build/bin/* dist/
           ARCHIVE_NAME="${MATRIX_NAME_ARCHIVE}-${VERSION}"
           if [[ "${MATRIX_TYPE_ARCHIVE}" == "zip" ]]; then
              ARCHIVE_PATH="${ARCHIVE_NAME}.zip"
              zip -r "${ARCHIVE_PATH}" dist/*
           else
              ARCHIVE_PATH="${ARCHIVE_NAME}.tar.gz"
              tar -czf "${ARCHIVE_PATH}" -C dist .
            fi
            ls 
            echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
            echo "ARCHIVE_PATH=${ARCHIVE_PATH}" >> $GITHUB_ENV
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_PATH }}

  release:
      name: Release to GitHub
      runs-on: ubuntu-latest
      needs: build
      steps:
        - name: Download all artifacts
          uses: actions/download-artifact@v4
          with:
            path: artifacts

        - name: Create GitHub Release
          uses: softprops/action-gh-release@v1
          with:
            tag_name: ${{ github.ref_name }}
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

        - name: Upload all artifacts to Release
          uses: softprops/action-gh-release@v1
          with:
            tag_name: ${{ github.ref_name }}
            files: artifacts/**/*.*
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}




          